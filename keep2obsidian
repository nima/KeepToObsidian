#!/usr/bin/env bash

let e=0
let imagesheader=0

: ${OBSIDIAN_P:="/mnt/z/Documents/Obsidian"}
: ${VAULT_N:="DaHiveMind"}
: ${IMAGES_D:="images"}

OBSIDIAN_P+="/${VAULT_N}"
EXPORT_P="${OBSIDIAN_P}/export/Keep" # Exporting from json out of here
IMPORT_P="${OBSIDIAN_P}/import/Keep" # Importing to markdown in here
IMAGES_P="${OBSIDIAN_P}/${IMAGES_D}" # Importing images here

rm -rf "${IMPORT_P}"
mkdir -p "${IMPORT_P}"

for p in OBSIDIAN_P EXPORT_P IMPORT_P IMAGES_P; do
    printf "Verifying ${p}[%s]..." "${!p}"
    [ -d "${!p}" ] && echo PASS || { echo FAIL; let e=1; }
done

function main() {
    local exportFrom
    local importTo
    local datum
    local created
    local updated
    local trashed
    local -a images

    echo "Migrating from Google Keep to Obsidian..."

    printf " - Copying images..."
    find "${EXPORT_P}" -type f -not -name '*.json' -and -not -name '*.html' -printf '.' -exec cp "{}" "${IMAGES_P}" \;
    echo "DONE"

    while read filename; do
        exportFrom="${EXPORT_P}/${filename}"
        datum="$(cat "${exportFrom}")"

        title="$(jq -rc '.title' <<< "${datum}")"
	printf " - %s..." "${title}"

	trashed=$(jq -rc '.isTrashed' <<< "${datum}")
	if [ "${trashed}" == "true" ]; then
	    echo "SKIP[${filename}]"
	    continue
	fi

	created=$(jq -rc '.createdTimestampUsec/1000000|floor' <<< "${datum}")
	updated=$(jq -rc '.userEditedTimestampUsec/1000000|floor' <<< "${datum}")
        body="$(jq -rc '.textContent' <<< "${datum}")"
        labels=( $(jq -rc 'select(.labels)|.labels[]|.name' <<< "${datum}") )
        images=( $(jq -rc 'select(.attachments)|.attachments[]|.filePath' <<< "${datum}") )

        importTo="${IMPORT_P}/${filename/%.json/.md}"
        cat <<! > "${importTo}"
---
created: $(gawk "BEGIN { print(strftime(\"%Y-%m-%dT%H:%M:%S-00:00\", ${created})); }")
updated: $(gawk "BEGIN { print(strftime(\"%Y-%m-%dT%H:%M:%S-00:00\", ${updated})); }")
---
# ${title}

${body}

---
$(if [ ${#images[@]} -gt 0 ] && [ $imagesheader == 0 ]; then printf "## Images\n"; let imagesheader=$imagesheader+1; fi)
$(if [ ${#images[@]} -gt 0 ]; then printf "![[${IMAGES_D}/%s]] \n" "${images[@]}"; fi)
$(if [ ${#images[@]} -gt 0 ] && [ $imagesheader > 0 ]; then printf "\n---\n"; fi)

**tags** ${labels[*]/#/#}
!
        echo "DONE [${filename}]"
    done < <(find "${EXPORT_P}" -type f -name "*.json" -printf "%f\n")
}

[ $e -ne 0 ] || main

exit $e
